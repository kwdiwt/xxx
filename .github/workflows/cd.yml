# # https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml
# name: Docker
#
# on:
#   push:
#     branches:
#       - main
# env:
#   # ghcr.io 是github搭建的一个 Docker Hub.
#   # 需创建一个以token访问ghcr.io
#   # 参考：
#   # https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic
#   # https://www.chenshaowen.com/blog/github-container-registry.html
#   #
#   # Use docker.io for Docker Hub if empty
#   REGISTRY: ghcr.io
#
#   # github.repository as <account>/<repo>
#   IMAGE_NAME: ${{ github.repository }}
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#
#     # matrix.os 	定义需要构建的平台列表，触发并行任务 	 仅声明参数，不处理架构差异
#     # QEMU 	 提供跨架构仿真能力，确保非本地架构的构建指令可执行 	必需支撑矩阵中的异构平台
#     # Buildx 	 调用 QEMU 和 Docker 引擎，根据矩阵参数执行实际的多平台构建与推送操作 	依赖 QEMU 实现跨架构编译
#
#     # https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
#     # In the previous example, each platform is built on the same runner which can take a
#     # long time depending on the number of platforms and your Dockerfile.
#     # To solve this issue you can use a matrix strategy to distribute the build for each
#     # platform across multiple runners and create manifest list using the
#     # buildx imagetools create command.
#     strategy:
#       matrix:
#         # https://docs.github.com/en/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners
#         # github arm 架构的runners公共仓库有ubuntu-24.04-arm，私有仓库使用macos-latest。
#         # 在github x86 runner上使用QEMU构建arm64镜像需要效率极其慢,
#         # 以当前这个项目为例需要30分钟左右,使用ubuntu-24.04-arm则2分钟左右可成功。
#         include:
#           - os: ubuntu-24.04
#             platform: linux/amd64
#           # - os: ubuntu-24.04-arm
#           #   platform: linux/arm64
#
#     # 使用ghcr.io需要设置
#     # Permissions for the GITHUB_TOKEN
#     permissions:
#       packages: write
#       contents: read
#
#     steps:
#       - name: Prepare
#         run: |
#           platform=${{ matrix.platform }}
#           echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
#
#       # https://github.com/docker/build-push-action?tab=readme-ov-file#git-context
#       - name: Check out repository code
#         uses: actions/checkout@v4
#
#       - name: Log into registry ${{ env.REGISTRY }}
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
#
#       # https://docs.docker.com/desktop/release-notes/#new-14
#       # docker buildx build --platform=linux/amd64,linux/arm64 -t xxx
#       # 本地不需要仿真器也能构建成功的原因是Docker Desktop集成支持内置Rosetta 2 或 QEMU 仿真器。
#       #
#       # Add support for more platforms with QEMU (optional)
#       # https://github.com/docker/setup-qemu-action
#       # - name: Set up QEMU
#       #   uses: docker/setup-qemu-action@v3
#
#       # Set up BuildKit Docker container builder to be able to build
#       # multi-platform images and export cache
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#
#       # Extract metadata (tags, labels) for Docker
#       # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#
#       # Build and push Docker image with Buildx
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           platforms: ${{ matrix.platform }}
#           tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           labels: ${{ steps.meta.outputs.labels }}
#           outputs: type=image,push-by-digest=true,name-canonical=true,push=true
#           load: true
#           # cache-from: type=gha
#           # cache-to: type=gha,mode=max
#
#       - name: Export digest
#         run: |
#           mkdir -p ${{ runner.temp }}/digests
#           digest="${{ steps.build.outputs.digest }}"
#           touch "${{ runner.temp }}/digests/${digest#sha256:}"
#
#       - name: Upload digest
#         uses: actions/upload-artifact@v4
#         with:
#           name: digests-${{ env.PLATFORM_PAIR }}
#           path: ${{ runner.temp }}/digests/*
#           if-no-files-found: error
#           retention-days: 1

  # merge:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - name: Download digests
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: ${{ runner.temp }}/digests
  #         pattern: digests-*
  #         merge-multiple: true
  #
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #         tags: |
  #           type=ref,event=branch
  #           type=ref,event=pr
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #
  #     - name: Create manifest list and push
  #       working-directory: ${{ runner.temp }}/digests
  #       run: |
  #         docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
  #           $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)
  #
  #     - name: Inspect image
  #       run: |
  #         docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

name: Docker image

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,push-by-digest=true,name-canonical=true

      - name: output
        run:
          echo ${{ steps.push.outputs.tags }}...${{ steps.push.outputs.digest }}
#       - name: Export digest
#         run: |
#           mkdir -p ${{ runner.temp }}/digests
#           digest="${{ steps.build.outputs.digest }}"
#           touch "${{ runner.temp }}/digests/${digest#sha256:}"
#
#       - name: Upload digest
#         uses: actions/upload-artifact@v4
#         with:
#           name: digests-${{ env.PLATFORM_PAIR }}
#           path: ${{ runner.temp }}/digests/*
#           if-no-files-found: error
#           retention-days: 1
